apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: otel
  namespace: opentelemetrycollector
spec:
  mode: deployment
  replicas: 1
  
  observability:
    metrics:
      enableMetrics: true
  
  config: |
    # ========================================
    # RECEIVERS - Accept traces from apps
    # ========================================
    receivers:
      # OTLP receiver (modern standard)
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      # Jaeger receiver (for legacy apps)
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
      
      # Zipkin receiver (for legacy apps)
      zipkin:
        endpoint: 0.0.0.0:9411

    # ========================================
    # PROCESSORS - Process traces
    # ========================================
    processors:
      # Batch traces for efficiency
      batch:
        timeout: 10s
        send_batch_size: 1024
      
      # Prevent out-of-memory errors
      memory_limiter:
        check_interval: 1s
        limit_mib: 512

    # ========================================
    # CONNECTORS - Generate metrics from spans
    # ========================================
    connectors:
      spanmetrics:
        metrics_flush_interval: 15s

    # ========================================
    # EXPORTERS - Send data to backends
    # ========================================
    exporters:
      # Export traces to Tempo
      otlp:
        endpoint: "tempo-sample-distributor.tracing-system.svc.cluster.local:4317"
        tls:
          insecure: true
      
      # Export span metrics to Prometheus
      prometheus:
        endpoint: 0.0.0.0:8889
        add_metric_suffixes: false
        resource_to_telemetry_conversion:
          enabled: true

    # ========================================
    # SERVICE PIPELINES - Define data flow
    # ========================================
    service:
      pipelines:
        # Traces pipeline: Receive → Process → Export to Tempo + Generate Metrics
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [memory_limiter, batch]
          exporters: [otlp, spanmetrics]
        
        # Metrics pipeline: Receive from spanmetrics → Export to Prometheus
        metrics:
          receivers: [spanmetrics]
          exporters: [prometheus]
